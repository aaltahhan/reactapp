{"version":3,"sources":["serviceWorker.js","components/mycounter.jsx","components/lscounters.jsx","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","MyCounter","this","props","counter","name","className","setBadgeClasses","formatCt","onClick","onIncrement","onDelete","id","badgeclasses","value","Component","LstCounters","state","counters","handleAddButton","tempcounters","i","indexOf","setState","handleDeleteButton","countersId","filter","c","handleClearCounters","map","ct","key","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"+OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4DCUSC,E,iLAzBD,IAAD,OACL,OACI,6BAGA,iCAAM,gCAAMC,KAAKC,MAAMC,QAAQC,KACtC,0BAAMC,UAAWJ,KAAKK,mBAAoBL,KAAKM,YAChD,4BAAQC,QAAS,kBAAM,EAAKN,MAAMO,YAAY,EAAKP,MAAMC,UAAUE,UAAU,0BAA7E,QACY,4BAAQG,QAAS,kBAAM,EAAKN,MAAMQ,SAAS,EAAKR,MAAMC,QAAQQ,KAAKN,UAAU,8BAA7E,e,wCAMR,IAAIO,EAAe,aAEnB,OADAA,GAA8C,IAA7BX,KAAKC,MAAMC,QAAQU,MAAe,eAAiB,e,iCAI5D,IACAA,EAAUZ,KAAKC,MAAMC,QAArBU,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GAtBdC,a,kOC2CTC,E,2MAzCXC,MAAQ,CACJC,SAAU,CACP,CAACN,GAAI,EAAEP,KAAM,uBAAwBS,MAAM,GACtD,CAACF,GAAI,EAAGP,KAAM,0BAA4BS,MAAM,GAChD,CAACF,GAAI,EAAGP,KAAM,mCAAoCS,MAAO,GACzD,CAACF,GAAI,EAAGP,KAAM,4CAA6CS,MAAM,K,EAI7DK,gBAAkB,SAAAf,GACd,IAAMgB,EAAY,YAAO,EAAKH,MAAMC,UAC9BG,EAAID,EAAaE,QAAQlB,GAC/BgB,EAAaC,G,yVAAb,IAAuBjB,GACvBgB,EAAaC,GAAGP,QAChB,EAAKS,SAAS,CAAEL,SAAUE,K,EAG9BI,mBAAqB,SAACC,GAClB,IAAML,EAAe,EAAKH,MAAMC,SAASQ,QAAO,SAAAC,GAAC,OAAIA,EAAEf,KAAOa,KAC9D,EAAKF,SAAS,CAAEL,SAAUE,K,EAG9BQ,oBAAsB,WAClB,IAAMR,EAAe,EAAKH,MAAMC,SAASW,KAAI,SAAAC,GAEzC,OADAA,EAAGhB,MAAQ,EACJgB,KAEX,EAAKP,SAAS,CAAEL,SAAUE,K,wEAGpB,IAAD,OACL,OAAQ,6BAEJ,4BAAQd,UAAU,6BAA6BG,QAASP,KAAK0B,qBAA7D,kBACC1B,KAAKe,MAAMC,SAASW,KAAI,SAAAzB,GAAO,OAC3B,kBAAC,EAAD,CAAW2B,IAAK3B,EAAQQ,GAAIR,QAASA,EAASO,SAAU,EAAKa,mBAAoBd,YAAa,EAAKS,0B,GApC1FJ,aCK1BiB,IAASC,OAAO,kBAAC,EAAD,MAAgBC,SAASC,eAAe,SHyHlD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBInInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.a8618ad5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nclass MyCounter extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n               \r\n\t\t\t\t\t\t\t\t\r\n            <ul>  <li> {this.props.counter.name}  \r\n\t\t\t\t <span className={this.setBadgeClasses()}>{this.formatCt()}</span>\r\n\t\t\t\t<button onClick={() => this.props.onIncrement(this.props.counter)} className=\"btn btn-primary btn-sm\">Add </button>\r\n                <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-warning btn-sm m-3\">Delete</button></li></ul>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    setBadgeClasses() {\r\n        let badgeclasses = \"badge m-3 \";\r\n        badgeclasses += (this.props.counter.value === 0) ? \"badge-danger\" : \"badge-info\";\r\n        return badgeclasses;\r\n    };\r\n\r\n    formatCt() {\r\n        const { value } = this.props.counter;\r\n        return value === 0 ? \"Zero\" : value;\r\n    };\r\n}\r\n\r\nexport default MyCounter;","import React, { Component } from 'react';\r\nimport MyCounter from './mycounter';\r\n\r\nclass LstCounters extends Component {\r\n    state = {\r\n        counters: [\r\n           {id: 1,name: \" React JS vs Angular\", value:0}, \r\n{id: 2, name: \"ASP.NET Core or Node JS\" , value:0}, \r\n{id: 3, name: \"Lifecycle of React JS Components\", value :0 }, \r\n{id: 4, name: \"Comparing JavaScript Libraries/Frameworks\", value:0}\r\n        ]\r\n    };\r\n\r\n    handleAddButton = counter => {\r\n        const tempcounters = [...this.state.counters];\r\n        const i = tempcounters.indexOf(counter);\r\n        tempcounters[i] = { ...counter };\r\n        tempcounters[i].value++;\r\n        this.setState({ counters: tempcounters });\r\n    };\r\n\r\n    handleDeleteButton = (countersId) => {\r\n        const tempcounters = this.state.counters.filter(c => c.id !== countersId);\r\n        this.setState({ counters: tempcounters });\r\n    };\r\n\r\n    handleClearCounters = () => {\r\n        const tempcounters = this.state.counters.map(ct => {\r\n            ct.value = 0;\r\n            return ct;\r\n        });\r\n        this.setState({ counters: tempcounters })\r\n    };\r\n\r\n    render() {\r\n        return (<div>\r\n\r\n            <button className=\"btn btn-primary btn-sm m-3\" onClick={this.handleClearCounters}>Clear Counters</button>\r\n            {this.state.counters.map(counter =>\r\n                (<MyCounter key={counter.id} counter={counter} onDelete={this.handleDeleteButton} onIncrement={this.handleAddButton} />))}\r\n\t\t\t\t\r\n        </div>)\r\n    }\r\n}\r\n\r\nexport default LstCounters;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport LsCounters from './components/lscounters';\r\n\r\nReactDOM.render(<LsCounters />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}